{"version":3,"sources":["components/weather/weathercard.js","components/weather/temp.js","App.js","reportWebVitals.js","index.js"],"names":["Weathercard","temp","humidity","pressure","weathermood","name","speed","country","sunset","React","useState","weatherState","setWeatheState","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","setSearchValue","tempInfo","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"8PAkHeA,EAhHK,SAAC,GASd,IARLC,EAQI,EARJA,KACAC,EAOI,EAPJA,SACAC,EAMI,EANJA,SACAC,EAKI,EALJA,YACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,QACAC,EACI,EADJA,OAEA,EAAuCC,IAAMC,SAAS,IAAtD,mBAAOC,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACR,GAAIT,EACF,OAAQA,GACN,IAAK,SACHQ,EAAe,iBACf,MACF,IAAK,OACHA,EAAe,UACf,MAQF,QACEA,EAAe,gBACf,MANF,IAAK,OACHA,EAAe,cAQpB,CAACR,IAGJ,IACIU,EAAO,IAAIC,KAAW,IADhBP,GAENQ,EAAO,UAAMF,EAAKG,WAAX,YAAyBH,EAAKI,cACzC,OACE,mCACE,0BAASC,UAAU,SAAnB,UACE,qBAAKA,UAAU,cAAf,SACE,mBAAGA,UAAS,aAAQR,OAGtB,sBAAKQ,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,SACE,iCAAOlB,EAAP,YAGF,sBAAKkB,UAAU,cAAf,UACE,qBAAKA,UAAU,mBAAf,SAAmCf,IACnC,sBAAKe,UAAU,QAAf,UACGd,EADH,KACWE,WAKf,sBAAKY,UAAU,OAAf,eAAwB,IAAIJ,MAAOK,iBAAnC,OAGA,sBAAKD,UAAU,aAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,mBAEhB,oBAAGA,UAAU,sBAAb,UACGH,EADH,OACe,uBADf,eAMF,sBAAKG,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,qBAEhB,oBAAGA,UAAU,sBAAb,UACGjB,EADH,IACa,uBADb,oBAOJ,sBAAKiB,UAAU,qBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,iBAEhB,oBAAGA,UAAU,sBAAb,UACGhB,EADH,IACa,uBADb,iBAMF,sBAAKgB,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,wBAEhB,oBAAGA,UAAU,sBAAb,UACGb,EADH,IACU,uBADV,0BC9BCe,G,MApEF,WACX,MAAsCX,mBAAS,WAA/C,mBAAOY,EAAP,KAAoBC,EAApB,KACA,EAAgCb,mBAAS,IAAzC,mBAAOc,EAAP,KAAiBC,EAAjB,KAEMC,EAAc,uCAAG,oDAAAC,EAAA,sEAEfC,EAFe,4DAE4CN,EAF5C,iEAIHO,MAAMD,GAJH,cAIfE,EAJe,gBAKFA,EAAIC,OALF,OAKfC,EALe,SAOkBA,EAAKC,KAAlChC,EAPW,EAOXA,KAAMC,EAPK,EAOLA,SAAUC,EAPL,EAOKA,SACVC,EAAgB4B,EAAKE,QAAQ,GAAnCD,KACA5B,EAAS2B,EAAT3B,KACAC,EAAU0B,EAAKG,KAAf7B,MAVW,EAWS0B,EAAKI,IAAzB7B,EAXW,EAWXA,QAASC,EAXE,EAWFA,OAajBiB,EAXyB,CACvBxB,OACAC,WACAC,WACAC,cACAC,OACAC,QACAC,UACAC,WArBiB,kDA0BnB6B,QAAQC,IAAR,MA1BmB,0DAAH,qDAkCpB,OAJAzB,qBAAU,WACRa,MACC,IAGD,qCACE,qBAAKP,UAAU,OAAf,SACE,sBAAKA,UAAU,SAAf,UACE,uBACEoB,KAAK,SACLC,YAAY,YACZC,WAAS,EACTC,GAAG,SACHvB,UAAU,aACVwB,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOtB,EAAesB,EAAEC,OAAOH,UAG3C,wBACExB,UAAU,eACVoB,KAAK,SACLQ,QAASrB,EAHX,yBAWJ,cAAC,EAAD,eAAiBF,SCvDRwB,EARH,WACV,OACE,mCACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7d35a3b3.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\nconst Weathercard = ({\n  temp,\n  humidity,\n  pressure,\n  weathermood,\n  name,\n  speed,\n  country,\n  sunset,\n}) => {\n  const [weatherState, setWeatheState] = React.useState(\"\");\n\n  useEffect(() => {\n    if (weathermood) {\n      switch (weathermood) {\n        case \"Clouds\":\n          setWeatheState(\"wi-day-cloudy\");\n          break;\n        case \"Haze\":\n          setWeatheState(\"wi-fog\");\n          break;\n        case \"Clear\":\n          setWeatheState(\"wi-day-sunny\");\n          break;\n        case \"Mist\":\n          setWeatheState(\"wi-dust\");\n          break;\n\n        default:\n          setWeatheState(\"wi-day-sunny\");\n          break;\n      }\n    }\n  }, [weathermood]);\n\n  // converting the seconds into time\n  let sec = sunset;\n  let date = new Date(sec * 1000);\n  let timeStr = `${date.getHours()}:${date.getMinutes()}`;\n  return (\n    <>\n      <article className=\"widget\">\n        <div className=\"weatherIcon\">\n          <i className={`wi ${weatherState}`}></i>\n        </div>\n\n        <div className=\"weatherInfo\">\n          <div className=\"temperature\">\n            <span>{temp}&deg;</span>\n          </div>\n\n          <div className=\"description\">\n            <div className=\"weatherCondition\">{weathermood}</div>\n            <div className=\"place\">\n              {name}, {country}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"date\"> {new Date().toLocaleString()} </div>\n\n        {/* our 4column section  */}\n        <div className=\"extra-temp\">\n          <div className=\"temp-info-minmax\">\n            <div className=\"two-sided-section\">\n              <p>\n                <i className={\"wi wi-sunset\"}></i>\n              </p>\n              <p className=\"extra-info-leftside\">\n                {timeStr} PM <br />\n                Sunset\n              </p>\n            </div>\n\n            <div className=\"two-sided-section\">\n              <p>\n                <i className={\"wi wi-humidity\"}></i>\n              </p>\n              <p className=\"extra-info-leftside\">\n                {humidity} <br />\n                Humidity\n              </p>\n            </div>\n          </div>\n\n          <div className=\"weather-extra-info\">\n            <div className=\"two-sided-section\">\n              <p>\n                <i className={\"wi wi-rain\"}></i>\n              </p>\n              <p className=\"extra-info-leftside\">\n                {pressure} <br />\n                Pressure\n              </p>\n            </div>\n\n            <div className=\"two-sided-section\">\n              <p>\n                <i className={\"wi wi-strong-wind\"}></i>\n              </p>\n              <p className=\"extra-info-leftside\">\n                {speed} <br />\n                Speed\n              </p>\n            </div>\n          </div>\n        </div>\n      </article>\n    </>\n  );\n};\n\nexport default Weathercard;\n","import React, { useState, useEffect } from \"react\";\nimport Weathercard from \"./weathercard\";\nimport \"./style.css\";\n\nconst Temp = () => {\n  const [searchValue, setSearchValue] = useState(\"Lucknow\");\n  const [tempInfo, setTempInfo] = useState({});\n\n  const getWeatherInfo = async () => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=715e902eec9e6286ce5ba7ff055c3ebb`;\n\n      let res = await fetch(url);\n      let data = await res.json();\n\n      const { temp, humidity, pressure } = data.main;\n      const { main: weathermood } = data.weather[0];\n      const { name } = data;\n      const { speed } = data.wind;\n      const { country, sunset } = data.sys;\n\n      const myNewWeatherInfo = {\n        temp,\n        humidity,\n        pressure,\n        weathermood,\n        name,\n        speed,\n        country,\n        sunset,\n      };\n\n      setTempInfo(myNewWeatherInfo);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getWeatherInfo();\n  }, []);\n\n  return (\n    <>\n      <div className=\"wrap\">\n        <div className=\"search\">\n          <input\n            type=\"search\"\n            placeholder=\"search...\"\n            autoFocus\n            id=\"search\"\n            className=\"searchTerm\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n          />\n\n          <button\n            className=\"searchButton\"\n            type=\"button\"\n            onClick={getWeatherInfo}\n          >\n            Search\n          </button>\n        </div>\n      </div>\n\n      {/* our temp card  */}\n      <Weathercard {...tempInfo} />\n    </>\n  );\n};\n\nexport default Temp;\n","import React from \"react\";\n// import Todo from \"./components/todoreact/todo\";\nimport Temp from \"./components/weather/temp\";\n\nconst App = () => {\n  return (\n    <>\n      <Temp />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}